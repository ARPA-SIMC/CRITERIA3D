/********************************************************************************
** Form generated from reading UI file 'mainwindow.ui'
**
** Created by: Qt User Interface Compiler version 6.9.2
**
** WARNING! All changes made in this file will be lost when recompiling UI file!
********************************************************************************/

#ifndef UI_MAINWINDOW_H
#define UI_MAINWINDOW_H

#include <QtCore/QDate>
#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtWidgets/QApplication>
#include <QtWidgets/QDateEdit>
#include <QtWidgets/QGroupBox>
#include <QtWidgets/QLabel>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QMenu>
#include <QtWidgets/QMenuBar>
#include <QtWidgets/QPushButton>
#include <QtWidgets/QSlider>
#include <QtWidgets/QSpinBox>
#include <QtWidgets/QStatusBar>
#include <QtWidgets/QWidget>

QT_BEGIN_NAMESPACE

class Ui_MainWindow
{
public:
    QAction *actionLoad_DEM;
    QAction *actionMapOpenStreetMap;
    QAction *actionMapESRISatellite;
    QAction *actionMapTerrain;
    QAction *actionVariableQualitySpatial;
    QAction *actionCriteria3D_waterFluxes_settings;
    QAction *actionCriteria3D_Initialize;
    QAction *actionView_Boundary;
    QAction *actionInterpolationSettings;
    QAction *actionProjectSettings;
    QAction *actionView_Slope;
    QAction *actionView_Aspect;
    QAction *actionView_PointsHide;
    QAction *actionView_PointsLocation;
    QAction *actionView_PointsCurrentVariable;
    QAction *actionView_Transmissivity;
    QAction *actionView_ET0;
    QAction *actionRadiation_compute_current_hour;
    QAction *actionComputeHour_meteoVariables;
    QAction *actionView_Global_irradiance;
    QAction *actionView_Air_temperature;
    QAction *actionView_Precipitation;
    QAction *actionView_Air_relative_humidity;
    QAction *actionView_Wind_intensity;
    QAction *actionRadiation_settings;
    QAction *actionView_SoilMap;
    QAction *actionLoad_MeteoPoints;
    QAction *actionMeteoPointsImport_data;
    QAction *actionOpenProject;
    QAction *actionCloseProject;
    QAction *actionHide_Geomap;
    QAction *actionView_MeteoVariable_None;
    QAction *actionCriteria3D_run_models;
    QAction *actionMapGoogle_hybrid_satellite;
    QAction *actionNew_meteoPointsDB_from_csv;
    QAction *actionSnow_settings;
    QAction *actionView_Snow_water_equivalent;
    QAction *actionView_Snow_surface_temperature;
    QAction *actionView_Snow_internal_energy;
    QAction *actionView_Snow_fall;
    QAction *actionView_Snow_surface_internal_energy;
    QAction *flagSave_state_daily_step;
    QAction *actionMapGoogle_satellite;
    QAction *actionView_Beam_irradiance;
    QAction *actionView_Diffuse_irradiance;
    QAction *actionView_Reflected_irradiance;
    QAction *actionView_Snow_liquid_water_content;
    QAction *actionView_Snow_age;
    QAction *actionView_Snowmelt;
    QAction *actionRadiation_run_model;
    QAction *actionProxy_analysis;
    QAction *actionComputePeriod_meteoVariables;
    QAction *flagView_not_active_points;
    QAction *actionDelete_Points_Selected;
    QAction *actionDelete_Points_NotActive;
    QAction *actionPoints_activate_all;
    QAction *actionPoints_deactivate_all;
    QAction *actionPoints_activate_selected;
    QAction *actionPoints_deactivate_selected;
    QAction *actionPoints_activate_from_point_list;
    QAction *actionPoints_activate_with_criteria;
    QAction *actionPoints_deactivate_with_criteria;
    QAction *actionPoints_deactivate_with_no_data;
    QAction *actionPoints_delete_data_selected;
    QAction *actionPoints_delete_data_not_active;
    QAction *actionPoints_deactivate_from_point_list;
    QAction *actionPoints_clear_selection;
    QAction *actionOutputPoints_newFile;
    QAction *actionLoad_OutputPoints;
    QAction *actionOutputPoints_activate_all;
    QAction *actionOutputPoints_activate_selected;
    QAction *actionOutputPoints_deactivate_all;
    QAction *actionOutputPoints_deactivate_selected;
    QAction *actionOutputPoints_delete_selected;
    QAction *actionOutputPoints_add;
    QAction *actionOutputDB_new;
    QAction *actionOutputDB_open;
    QAction *actionOutputPoints_clear_selection;
    QAction *flagHide_outputPoints;
    QAction *flagView_not_active_outputPoints;
    QAction *actionHide_Soil_map;
    QAction *flagOutputPoints_save_output;
    QAction *flagCompute_only_points;
    QAction *flagView_values;
    QAction *actionView_Snow_sensible_heat;
    QAction *actionView_Snow_latent_heat;
    QAction *actionTopographicDistanceMapWrite;
    QAction *actionTopographicDistanceMapLoad;
    QAction *actionCriteria3D_compute_next_hour;
    QAction *actionShow_3D_viewer;
    QAction *actionView_LandUseMap;
    QAction *actionHide_LandUseMap;
    QAction *actionLoad_soil_map;
    QAction *actionLoad_soil_data;
    QAction *actionLoad_land_use_map;
    QAction *actionLoad_crop_data;
    QAction *actionView_SoilMoisture;
    QAction *actionView_SurfaceWaterContent_automatic_range;
    QAction *actionView_SurfaceWaterContent_fixed_range;
    QAction *actionView_Crop_degreeDays;
    QAction *actionView_Crop_LAI;
    QAction *actionCriteria3D_update_subHourly;
    QAction *actionView_Factor_of_safety;
    QAction *actionView_DegreeOfSaturation_automatic_range;
    QAction *actionView_DegreeOfSaturation_fixed_range;
    QAction *actionCriteria3D_load_state;
    QAction *actionCriteria3D_load_external_state;
    QAction *actionCriteria3D_save_state;
    QAction *actionView_Factor_of_safety_minimum;
    QAction *flagSave_state_endRun;
    QAction *flag_increase_slope;
    QAction *actionView_Radiation_None;
    QAction *actionView_Water_potential;
    QAction *actionCreate_new_land_use_map;
    QAction *actionCriteria3D_set_processes;
    QAction *actionView_SurfacePond;
    QAction *actionSave_outputRaster;
    QAction *actionLoad_DEM_;
    QAction *actionExtract_sub_basin;
    QAction *actionCriteria3D_Water_content_summary;
    QAction *actionDEM_summary;
    QAction *actionTree_cover_map;
    QAction *actionDecomposable_plant_matter;
    QAction *actionResistant_plant_matter;
    QAction *actionMicrobial_biomass;
    QAction *actionHumified_organic_matter;
    QAction *actionSoil_organic_matter;
    QAction *actionAutomatic_state_saving_end_of_year;
    QAction *actionAutomatic_state_saving_end_of_month;
    QWidget *centralWidget;
    QWidget *widgetMap;
    QGroupBox *groupBoxDEM;
    QSlider *opacitySliderRasterInput;
    QWidget *colorScaleInputRaster;
    QLabel *labelInputRaster;
    QGroupBox *groupBoxVariableMap;
    QSlider *opacitySliderRasterOutput;
    QWidget *colorScaleOutputRaster;
    QLabel *labelOutputRaster;
    QGroupBox *groupBoxMeteoPoints;
    QDateEdit *dateEdit;
    QPushButton *variableButton;
    QLabel *labelVariable;
    QWidget *colorScaleMeteoPoints;
    QSpinBox *timeEdit;
    QPushButton *dayBeforeButton;
    QPushButton *dayAfterButton;
    QGroupBox *groupBoxModel;
    QPushButton *buttonModelStart;
    QPushButton *buttonModelPause;
    QPushButton *buttonModelStop;
    QSpinBox *layerNrEdit;
    QLabel *labelLayer;
    QLineEdit *layerDepthEdit;
    QLabel *labelLayer_2;
    QLineEdit *modelTimeEdit;
    QMenuBar *menuBar;
    QMenu *menuFile;
    QMenu *menuInput;
    QMenu *menuMeteo_points;
    QMenu *menuSoil;
    QMenu *menuLand_use;
    QMenu *menuOpen_project;
    QMenu *menuOutput;
    QMenu *menuOutput_db;
    QMenu *menuOutput_points_4;
    QMenu *menuDataSpatialization;
    QMenu *menuTopographic_Distance_map;
    QMenu *menuGIS_settings;
    QMenu *menuMap;
    QMenu *menu3DModel;
    QMenu *menuShow;
    QMenu *menuPoints;
    QMenu *menuDEM;
    QMenu *menuMeteo_variables;
    QMenu *menuShowSoil;
    QMenu *menuSnow;
    QMenu *menuSolar_radiation_model;
    QMenu *menuOutput_points_3;
    QMenu *menuWater_fluxes;
    QMenu *menuSurface_water_content;
    QMenu *menuDegree_of_saturation;
    QMenu *menuShowLand_use;
    QMenu *actionView_Crop;
    QMenu *menuSlope_stability;
    QMenu *menuRothC_model;
    QMenu *menuSolar_radiation_model_2;
    QMenu *menuMeteo_points_2;
    QMenu *menuDelete_points;
    QMenu *menuActivate_points;
    QMenu *menuDeactivate_points;
    QMenu *menuPoints_delete;
    QMenu *menuOutput_points;
    QMenu *menuActivate_outputPoints;
    QMenu *menuDeactivate_outputPoints;
    QMenu *menuDelete;
    QStatusBar *statusBar;

    void setupUi(QMainWindow *MainWindow)
    {
        if (MainWindow->objectName().isEmpty())
            MainWindow->setObjectName("MainWindow");
        MainWindow->resize(1280, 700);
        QPalette palette;
        QBrush brush(QColor(255, 255, 255, 255));
        brush.setStyle(Qt::BrushStyle::SolidPattern);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush);
        QBrush brush1(QColor(127, 127, 127, 255));
        brush1.setStyle(Qt::BrushStyle::SolidPattern);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Dark, brush1);
        QBrush brush2(QColor(170, 170, 170, 255));
        brush2.setStyle(Qt::BrushStyle::SolidPattern);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Mid, brush2);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush);
        QBrush brush3(QColor(0, 0, 0, 255));
        brush3.setStyle(Qt::BrushStyle::SolidPattern);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Shadow, brush3);
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush4(QColor(0, 0, 0, 128));
        brush4.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush4);
#endif
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Dark, brush1);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Mid, brush2);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Shadow, brush3);
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush5(QColor(0, 0, 0, 128));
        brush5.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush5);
#endif
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Dark, brush1);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Mid, brush2);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Shadow, brush3);
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush6(QColor(0, 0, 0, 128));
        brush6.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush6);
#endif
        MainWindow->setPalette(palette);
        QFont font;
        font.setPointSize(10);
        font.setBold(false);
        MainWindow->setFont(font);
        MainWindow->setAutoFillBackground(false);
        MainWindow->setAnimated(false);
        actionLoad_DEM = new QAction(MainWindow);
        actionLoad_DEM->setObjectName("actionLoad_DEM");
        actionMapOpenStreetMap = new QAction(MainWindow);
        actionMapOpenStreetMap->setObjectName("actionMapOpenStreetMap");
        actionMapOpenStreetMap->setCheckable(true);
        actionMapOpenStreetMap->setChecked(false);
        actionMapESRISatellite = new QAction(MainWindow);
        actionMapESRISatellite->setObjectName("actionMapESRISatellite");
        actionMapESRISatellite->setCheckable(true);
        actionMapTerrain = new QAction(MainWindow);
        actionMapTerrain->setObjectName("actionMapTerrain");
        actionMapTerrain->setCheckable(true);
        actionVariableQualitySpatial = new QAction(MainWindow);
        actionVariableQualitySpatial->setObjectName("actionVariableQualitySpatial");
        actionVariableQualitySpatial->setCheckable(true);
        actionVariableQualitySpatial->setChecked(true);
        actionCriteria3D_waterFluxes_settings = new QAction(MainWindow);
        actionCriteria3D_waterFluxes_settings->setObjectName("actionCriteria3D_waterFluxes_settings");
        actionCriteria3D_Initialize = new QAction(MainWindow);
        actionCriteria3D_Initialize->setObjectName("actionCriteria3D_Initialize");
        actionView_Boundary = new QAction(MainWindow);
        actionView_Boundary->setObjectName("actionView_Boundary");
        actionInterpolationSettings = new QAction(MainWindow);
        actionInterpolationSettings->setObjectName("actionInterpolationSettings");
        actionProjectSettings = new QAction(MainWindow);
        actionProjectSettings->setObjectName("actionProjectSettings");
        actionView_Slope = new QAction(MainWindow);
        actionView_Slope->setObjectName("actionView_Slope");
        actionView_Aspect = new QAction(MainWindow);
        actionView_Aspect->setObjectName("actionView_Aspect");
        actionView_PointsHide = new QAction(MainWindow);
        actionView_PointsHide->setObjectName("actionView_PointsHide");
        actionView_PointsHide->setCheckable(true);
        actionView_PointsLocation = new QAction(MainWindow);
        actionView_PointsLocation->setObjectName("actionView_PointsLocation");
        actionView_PointsLocation->setCheckable(true);
        actionView_PointsCurrentVariable = new QAction(MainWindow);
        actionView_PointsCurrentVariable->setObjectName("actionView_PointsCurrentVariable");
        actionView_PointsCurrentVariable->setCheckable(true);
        actionView_Transmissivity = new QAction(MainWindow);
        actionView_Transmissivity->setObjectName("actionView_Transmissivity");
        actionView_ET0 = new QAction(MainWindow);
        actionView_ET0->setObjectName("actionView_ET0");
        actionRadiation_compute_current_hour = new QAction(MainWindow);
        actionRadiation_compute_current_hour->setObjectName("actionRadiation_compute_current_hour");
        actionComputeHour_meteoVariables = new QAction(MainWindow);
        actionComputeHour_meteoVariables->setObjectName("actionComputeHour_meteoVariables");
        actionView_Global_irradiance = new QAction(MainWindow);
        actionView_Global_irradiance->setObjectName("actionView_Global_irradiance");
        actionView_Air_temperature = new QAction(MainWindow);
        actionView_Air_temperature->setObjectName("actionView_Air_temperature");
        actionView_Precipitation = new QAction(MainWindow);
        actionView_Precipitation->setObjectName("actionView_Precipitation");
        actionView_Air_relative_humidity = new QAction(MainWindow);
        actionView_Air_relative_humidity->setObjectName("actionView_Air_relative_humidity");
        actionView_Wind_intensity = new QAction(MainWindow);
        actionView_Wind_intensity->setObjectName("actionView_Wind_intensity");
        actionRadiation_settings = new QAction(MainWindow);
        actionRadiation_settings->setObjectName("actionRadiation_settings");
        actionView_SoilMap = new QAction(MainWindow);
        actionView_SoilMap->setObjectName("actionView_SoilMap");
        actionView_SoilMap->setCheckable(false);
        actionView_SoilMap->setEnabled(true);
        actionLoad_MeteoPoints = new QAction(MainWindow);
        actionLoad_MeteoPoints->setObjectName("actionLoad_MeteoPoints");
        actionMeteoPointsImport_data = new QAction(MainWindow);
        actionMeteoPointsImport_data->setObjectName("actionMeteoPointsImport_data");
        actionOpenProject = new QAction(MainWindow);
        actionOpenProject->setObjectName("actionOpenProject");
        actionCloseProject = new QAction(MainWindow);
        actionCloseProject->setObjectName("actionCloseProject");
        actionHide_Geomap = new QAction(MainWindow);
        actionHide_Geomap->setObjectName("actionHide_Geomap");
        actionView_MeteoVariable_None = new QAction(MainWindow);
        actionView_MeteoVariable_None->setObjectName("actionView_MeteoVariable_None");
        actionCriteria3D_run_models = new QAction(MainWindow);
        actionCriteria3D_run_models->setObjectName("actionCriteria3D_run_models");
        actionMapGoogle_hybrid_satellite = new QAction(MainWindow);
        actionMapGoogle_hybrid_satellite->setObjectName("actionMapGoogle_hybrid_satellite");
        actionMapGoogle_hybrid_satellite->setCheckable(true);
        actionNew_meteoPointsDB_from_csv = new QAction(MainWindow);
        actionNew_meteoPointsDB_from_csv->setObjectName("actionNew_meteoPointsDB_from_csv");
        actionSnow_settings = new QAction(MainWindow);
        actionSnow_settings->setObjectName("actionSnow_settings");
        actionSnow_settings->setCheckable(false);
        actionView_Snow_water_equivalent = new QAction(MainWindow);
        actionView_Snow_water_equivalent->setObjectName("actionView_Snow_water_equivalent");
        actionView_Snow_surface_temperature = new QAction(MainWindow);
        actionView_Snow_surface_temperature->setObjectName("actionView_Snow_surface_temperature");
        actionView_Snow_internal_energy = new QAction(MainWindow);
        actionView_Snow_internal_energy->setObjectName("actionView_Snow_internal_energy");
        actionView_Snow_fall = new QAction(MainWindow);
        actionView_Snow_fall->setObjectName("actionView_Snow_fall");
        actionView_Snow_surface_internal_energy = new QAction(MainWindow);
        actionView_Snow_surface_internal_energy->setObjectName("actionView_Snow_surface_internal_energy");
        flagSave_state_daily_step = new QAction(MainWindow);
        flagSave_state_daily_step->setObjectName("flagSave_state_daily_step");
        flagSave_state_daily_step->setCheckable(true);
        flagSave_state_daily_step->setChecked(false);
        actionMapGoogle_satellite = new QAction(MainWindow);
        actionMapGoogle_satellite->setObjectName("actionMapGoogle_satellite");
        actionMapGoogle_satellite->setCheckable(true);
        actionView_Beam_irradiance = new QAction(MainWindow);
        actionView_Beam_irradiance->setObjectName("actionView_Beam_irradiance");
        actionView_Diffuse_irradiance = new QAction(MainWindow);
        actionView_Diffuse_irradiance->setObjectName("actionView_Diffuse_irradiance");
        actionView_Reflected_irradiance = new QAction(MainWindow);
        actionView_Reflected_irradiance->setObjectName("actionView_Reflected_irradiance");
        actionView_Snow_liquid_water_content = new QAction(MainWindow);
        actionView_Snow_liquid_water_content->setObjectName("actionView_Snow_liquid_water_content");
        actionView_Snow_age = new QAction(MainWindow);
        actionView_Snow_age->setObjectName("actionView_Snow_age");
        actionView_Snowmelt = new QAction(MainWindow);
        actionView_Snowmelt->setObjectName("actionView_Snowmelt");
        actionRadiation_run_model = new QAction(MainWindow);
        actionRadiation_run_model->setObjectName("actionRadiation_run_model");
        actionProxy_analysis = new QAction(MainWindow);
        actionProxy_analysis->setObjectName("actionProxy_analysis");
        actionComputePeriod_meteoVariables = new QAction(MainWindow);
        actionComputePeriod_meteoVariables->setObjectName("actionComputePeriod_meteoVariables");
        flagView_not_active_points = new QAction(MainWindow);
        flagView_not_active_points->setObjectName("flagView_not_active_points");
        flagView_not_active_points->setCheckable(true);
        flagView_not_active_points->setChecked(true);
        actionDelete_Points_Selected = new QAction(MainWindow);
        actionDelete_Points_Selected->setObjectName("actionDelete_Points_Selected");
        actionDelete_Points_NotActive = new QAction(MainWindow);
        actionDelete_Points_NotActive->setObjectName("actionDelete_Points_NotActive");
        actionPoints_activate_all = new QAction(MainWindow);
        actionPoints_activate_all->setObjectName("actionPoints_activate_all");
        actionPoints_deactivate_all = new QAction(MainWindow);
        actionPoints_deactivate_all->setObjectName("actionPoints_deactivate_all");
        actionPoints_activate_selected = new QAction(MainWindow);
        actionPoints_activate_selected->setObjectName("actionPoints_activate_selected");
        actionPoints_deactivate_selected = new QAction(MainWindow);
        actionPoints_deactivate_selected->setObjectName("actionPoints_deactivate_selected");
        actionPoints_activate_from_point_list = new QAction(MainWindow);
        actionPoints_activate_from_point_list->setObjectName("actionPoints_activate_from_point_list");
        actionPoints_activate_with_criteria = new QAction(MainWindow);
        actionPoints_activate_with_criteria->setObjectName("actionPoints_activate_with_criteria");
        actionPoints_deactivate_with_criteria = new QAction(MainWindow);
        actionPoints_deactivate_with_criteria->setObjectName("actionPoints_deactivate_with_criteria");
        actionPoints_deactivate_with_no_data = new QAction(MainWindow);
        actionPoints_deactivate_with_no_data->setObjectName("actionPoints_deactivate_with_no_data");
        actionPoints_deactivate_with_no_data->setEnabled(true);
        actionPoints_delete_data_selected = new QAction(MainWindow);
        actionPoints_delete_data_selected->setObjectName("actionPoints_delete_data_selected");
        actionPoints_delete_data_not_active = new QAction(MainWindow);
        actionPoints_delete_data_not_active->setObjectName("actionPoints_delete_data_not_active");
        actionPoints_deactivate_from_point_list = new QAction(MainWindow);
        actionPoints_deactivate_from_point_list->setObjectName("actionPoints_deactivate_from_point_list");
        actionPoints_clear_selection = new QAction(MainWindow);
        actionPoints_clear_selection->setObjectName("actionPoints_clear_selection");
        actionOutputPoints_newFile = new QAction(MainWindow);
        actionOutputPoints_newFile->setObjectName("actionOutputPoints_newFile");
        actionLoad_OutputPoints = new QAction(MainWindow);
        actionLoad_OutputPoints->setObjectName("actionLoad_OutputPoints");
        actionOutputPoints_activate_all = new QAction(MainWindow);
        actionOutputPoints_activate_all->setObjectName("actionOutputPoints_activate_all");
        actionOutputPoints_activate_selected = new QAction(MainWindow);
        actionOutputPoints_activate_selected->setObjectName("actionOutputPoints_activate_selected");
        actionOutputPoints_deactivate_all = new QAction(MainWindow);
        actionOutputPoints_deactivate_all->setObjectName("actionOutputPoints_deactivate_all");
        actionOutputPoints_deactivate_selected = new QAction(MainWindow);
        actionOutputPoints_deactivate_selected->setObjectName("actionOutputPoints_deactivate_selected");
        actionOutputPoints_delete_selected = new QAction(MainWindow);
        actionOutputPoints_delete_selected->setObjectName("actionOutputPoints_delete_selected");
        actionOutputPoints_add = new QAction(MainWindow);
        actionOutputPoints_add->setObjectName("actionOutputPoints_add");
        actionOutputDB_new = new QAction(MainWindow);
        actionOutputDB_new->setObjectName("actionOutputDB_new");
        actionOutputDB_open = new QAction(MainWindow);
        actionOutputDB_open->setObjectName("actionOutputDB_open");
        actionOutputPoints_clear_selection = new QAction(MainWindow);
        actionOutputPoints_clear_selection->setObjectName("actionOutputPoints_clear_selection");
        flagHide_outputPoints = new QAction(MainWindow);
        flagHide_outputPoints->setObjectName("flagHide_outputPoints");
        flagHide_outputPoints->setCheckable(true);
        flagView_not_active_outputPoints = new QAction(MainWindow);
        flagView_not_active_outputPoints->setObjectName("flagView_not_active_outputPoints");
        flagView_not_active_outputPoints->setCheckable(true);
        flagView_not_active_outputPoints->setChecked(true);
        actionHide_Soil_map = new QAction(MainWindow);
        actionHide_Soil_map->setObjectName("actionHide_Soil_map");
        flagOutputPoints_save_output = new QAction(MainWindow);
        flagOutputPoints_save_output->setObjectName("flagOutputPoints_save_output");
        flagOutputPoints_save_output->setCheckable(true);
        flagCompute_only_points = new QAction(MainWindow);
        flagCompute_only_points->setObjectName("flagCompute_only_points");
        flagCompute_only_points->setCheckable(true);
        flagView_values = new QAction(MainWindow);
        flagView_values->setObjectName("flagView_values");
        flagView_values->setCheckable(true);
        actionView_Snow_sensible_heat = new QAction(MainWindow);
        actionView_Snow_sensible_heat->setObjectName("actionView_Snow_sensible_heat");
        actionView_Snow_latent_heat = new QAction(MainWindow);
        actionView_Snow_latent_heat->setObjectName("actionView_Snow_latent_heat");
        actionTopographicDistanceMapWrite = new QAction(MainWindow);
        actionTopographicDistanceMapWrite->setObjectName("actionTopographicDistanceMapWrite");
        actionTopographicDistanceMapLoad = new QAction(MainWindow);
        actionTopographicDistanceMapLoad->setObjectName("actionTopographicDistanceMapLoad");
        actionCriteria3D_compute_next_hour = new QAction(MainWindow);
        actionCriteria3D_compute_next_hour->setObjectName("actionCriteria3D_compute_next_hour");
        actionShow_3D_viewer = new QAction(MainWindow);
        actionShow_3D_viewer->setObjectName("actionShow_3D_viewer");
        actionView_LandUseMap = new QAction(MainWindow);
        actionView_LandUseMap->setObjectName("actionView_LandUseMap");
        actionHide_LandUseMap = new QAction(MainWindow);
        actionHide_LandUseMap->setObjectName("actionHide_LandUseMap");
        actionLoad_soil_map = new QAction(MainWindow);
        actionLoad_soil_map->setObjectName("actionLoad_soil_map");
        actionLoad_soil_data = new QAction(MainWindow);
        actionLoad_soil_data->setObjectName("actionLoad_soil_data");
        actionLoad_land_use_map = new QAction(MainWindow);
        actionLoad_land_use_map->setObjectName("actionLoad_land_use_map");
        actionLoad_crop_data = new QAction(MainWindow);
        actionLoad_crop_data->setObjectName("actionLoad_crop_data");
        actionView_SoilMoisture = new QAction(MainWindow);
        actionView_SoilMoisture->setObjectName("actionView_SoilMoisture");
        actionView_SurfaceWaterContent_automatic_range = new QAction(MainWindow);
        actionView_SurfaceWaterContent_automatic_range->setObjectName("actionView_SurfaceWaterContent_automatic_range");
        actionView_SurfaceWaterContent_automatic_range->setCheckable(false);
        actionView_SurfaceWaterContent_fixed_range = new QAction(MainWindow);
        actionView_SurfaceWaterContent_fixed_range->setObjectName("actionView_SurfaceWaterContent_fixed_range");
        actionView_SurfaceWaterContent_fixed_range->setCheckable(false);
        actionView_Crop_degreeDays = new QAction(MainWindow);
        actionView_Crop_degreeDays->setObjectName("actionView_Crop_degreeDays");
        actionView_Crop_LAI = new QAction(MainWindow);
        actionView_Crop_LAI->setObjectName("actionView_Crop_LAI");
        actionCriteria3D_update_subHourly = new QAction(MainWindow);
        actionCriteria3D_update_subHourly->setObjectName("actionCriteria3D_update_subHourly");
        actionCriteria3D_update_subHourly->setCheckable(true);
        actionView_Factor_of_safety = new QAction(MainWindow);
        actionView_Factor_of_safety->setObjectName("actionView_Factor_of_safety");
        actionView_DegreeOfSaturation_automatic_range = new QAction(MainWindow);
        actionView_DegreeOfSaturation_automatic_range->setObjectName("actionView_DegreeOfSaturation_automatic_range");
        actionView_DegreeOfSaturation_fixed_range = new QAction(MainWindow);
        actionView_DegreeOfSaturation_fixed_range->setObjectName("actionView_DegreeOfSaturation_fixed_range");
        actionCriteria3D_load_state = new QAction(MainWindow);
        actionCriteria3D_load_state->setObjectName("actionCriteria3D_load_state");
        actionCriteria3D_load_external_state = new QAction(MainWindow);
        actionCriteria3D_load_external_state->setObjectName("actionCriteria3D_load_external_state");
        actionCriteria3D_save_state = new QAction(MainWindow);
        actionCriteria3D_save_state->setObjectName("actionCriteria3D_save_state");
        actionView_Factor_of_safety_minimum = new QAction(MainWindow);
        actionView_Factor_of_safety_minimum->setObjectName("actionView_Factor_of_safety_minimum");
        flagSave_state_endRun = new QAction(MainWindow);
        flagSave_state_endRun->setObjectName("flagSave_state_endRun");
        flagSave_state_endRun->setCheckable(true);
        flag_increase_slope = new QAction(MainWindow);
        flag_increase_slope->setObjectName("flag_increase_slope");
        flag_increase_slope->setCheckable(true);
        actionView_Radiation_None = new QAction(MainWindow);
        actionView_Radiation_None->setObjectName("actionView_Radiation_None");
        actionView_Water_potential = new QAction(MainWindow);
        actionView_Water_potential->setObjectName("actionView_Water_potential");
        actionCreate_new_land_use_map = new QAction(MainWindow);
        actionCreate_new_land_use_map->setObjectName("actionCreate_new_land_use_map");
        actionCriteria3D_set_processes = new QAction(MainWindow);
        actionCriteria3D_set_processes->setObjectName("actionCriteria3D_set_processes");
        actionView_SurfacePond = new QAction(MainWindow);
        actionView_SurfacePond->setObjectName("actionView_SurfacePond");
        actionSave_outputRaster = new QAction(MainWindow);
        actionSave_outputRaster->setObjectName("actionSave_outputRaster");
        actionLoad_DEM_ = new QAction(MainWindow);
        actionLoad_DEM_->setObjectName("actionLoad_DEM_");
        actionExtract_sub_basin = new QAction(MainWindow);
        actionExtract_sub_basin->setObjectName("actionExtract_sub_basin");
        actionCriteria3D_Water_content_summary = new QAction(MainWindow);
        actionCriteria3D_Water_content_summary->setObjectName("actionCriteria3D_Water_content_summary");
        actionDEM_summary = new QAction(MainWindow);
        actionDEM_summary->setObjectName("actionDEM_summary");
        actionTree_cover_map = new QAction(MainWindow);
        actionTree_cover_map->setObjectName("actionTree_cover_map");
        actionDecomposable_plant_matter = new QAction(MainWindow);
        actionDecomposable_plant_matter->setObjectName("actionDecomposable_plant_matter");
        actionResistant_plant_matter = new QAction(MainWindow);
        actionResistant_plant_matter->setObjectName("actionResistant_plant_matter");
        actionMicrobial_biomass = new QAction(MainWindow);
        actionMicrobial_biomass->setObjectName("actionMicrobial_biomass");
        actionHumified_organic_matter = new QAction(MainWindow);
        actionHumified_organic_matter->setObjectName("actionHumified_organic_matter");
        actionSoil_organic_matter = new QAction(MainWindow);
        actionSoil_organic_matter->setObjectName("actionSoil_organic_matter");
        actionAutomatic_state_saving_end_of_year = new QAction(MainWindow);
        actionAutomatic_state_saving_end_of_year->setObjectName("actionAutomatic_state_saving_end_of_year");
        actionAutomatic_state_saving_end_of_year->setCheckable(true);
        actionAutomatic_state_saving_end_of_month = new QAction(MainWindow);
        actionAutomatic_state_saving_end_of_month->setObjectName("actionAutomatic_state_saving_end_of_month");
        actionAutomatic_state_saving_end_of_month->setCheckable(true);
        centralWidget = new QWidget(MainWindow);
        centralWidget->setObjectName("centralWidget");
        centralWidget->setMinimumSize(QSize(0, 0));
        centralWidget->setMaximumSize(QSize(2000, 2000));
        QPalette palette1;
        QBrush brush7(QColor(16, 16, 16, 255));
        brush7.setStyle(Qt::BrushStyle::SolidPattern);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::WindowText, brush7);
        QBrush brush8(QColor(248, 248, 248, 255));
        brush8.setStyle(Qt::BrushStyle::SolidPattern);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush8);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Light, brush8);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush8);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Text, brush7);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::BrightText, brush8);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::ButtonText, brush7);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Base, brush8);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush8);
        QBrush brush9(QColor(240, 240, 240, 255));
        brush9.setStyle(Qt::BrushStyle::SolidPattern);
        palette1.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush9);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::WindowText, brush7);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Light, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Text, brush7);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::BrightText, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::ButtonText, brush7);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Base, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush8);
        palette1.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush9);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Light, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::BrightText, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Base, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush8);
        palette1.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush9);
        centralWidget->setPalette(palette1);
        widgetMap = new QWidget(centralWidget);
        widgetMap->setObjectName("widgetMap");
        widgetMap->setGeometry(QRect(290, 10, 721, 491));
        widgetMap->setFont(font);
        widgetMap->setMouseTracking(true);
        groupBoxDEM = new QGroupBox(centralWidget);
        groupBoxDEM->setObjectName("groupBoxDEM");
        groupBoxDEM->setEnabled(false);
        groupBoxDEM->setGeometry(QRect(0, 310, 271, 112));
        QPalette palette2;
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::WindowText, brush7);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush8);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush8);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Dark, brush1);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Mid, brush2);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush8);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Shadow, brush3);
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush8);
        QBrush brush10(QColor(0, 0, 0, 128));
        brush10.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette2.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush10);
#endif
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::WindowText, brush7);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush8);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush8);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Dark, brush1);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Mid, brush2);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush8);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Shadow, brush3);
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush8);
        QBrush brush11(QColor(0, 0, 0, 128));
        brush11.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette2.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush11);
#endif
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush8);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush8);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Dark, brush1);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Mid, brush2);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Base, brush8);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush8);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Shadow, brush3);
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush8);
        QBrush brush12(QColor(0, 0, 0, 128));
        brush12.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette2.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush12);
#endif
        groupBoxDEM->setPalette(palette2);
        QFont font1;
        font1.setPointSize(9);
        font1.setBold(false);
        groupBoxDEM->setFont(font1);
        groupBoxDEM->setAutoFillBackground(true);
        groupBoxDEM->setTitle(QString::fromUtf8("Digital Elevation Model"));
        groupBoxDEM->setAlignment(Qt::AlignmentFlag::AlignLeading|Qt::AlignmentFlag::AlignLeft|Qt::AlignmentFlag::AlignVCenter);
        opacitySliderRasterInput = new QSlider(groupBoxDEM);
        opacitySliderRasterInput->setObjectName("opacitySliderRasterInput");
        opacitySliderRasterInput->setEnabled(false);
        opacitySliderRasterInput->setGeometry(QRect(20, 20, 231, 22));
        opacitySliderRasterInput->setToolTipDuration(-1);
#if QT_CONFIG(statustip)
        opacitySliderRasterInput->setStatusTip(QString::fromUtf8(""));
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        opacitySliderRasterInput->setWhatsThis(QString::fromUtf8(""));
#endif // QT_CONFIG(whatsthis)
        opacitySliderRasterInput->setMaximum(100);
        opacitySliderRasterInput->setValue(75);
        opacitySliderRasterInput->setOrientation(Qt::Orientation::Horizontal);
        colorScaleInputRaster = new QWidget(groupBoxDEM);
        colorScaleInputRaster->setObjectName("colorScaleInputRaster");
        colorScaleInputRaster->setGeometry(QRect(1, 60, 266, 42));
        QFont font2;
        font2.setPointSize(8);
        font2.setBold(false);
        colorScaleInputRaster->setFont(font2);
        labelInputRaster = new QLabel(groupBoxDEM);
        labelInputRaster->setObjectName("labelInputRaster");
        labelInputRaster->setGeometry(QRect(20, 40, 241, 21));
        QPalette palette3;
        labelInputRaster->setPalette(palette3);
        labelInputRaster->setFont(font1);
        groupBoxVariableMap = new QGroupBox(centralWidget);
        groupBoxVariableMap->setObjectName("groupBoxVariableMap");
        groupBoxVariableMap->setEnabled(false);
        groupBoxVariableMap->setGeometry(QRect(0, 430, 271, 115));
        QPalette palette4;
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::WindowText, brush7);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Dark, brush1);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Mid, brush2);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush8);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Shadow, brush3);
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush13(QColor(0, 0, 0, 128));
        brush13.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette4.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush13);
#endif
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::WindowText, brush7);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Dark, brush1);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Mid, brush2);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush8);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Shadow, brush3);
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush14(QColor(0, 0, 0, 128));
        brush14.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette4.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush14);
#endif
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Dark, brush1);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Mid, brush2);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Base, brush8);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush8);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Shadow, brush3);
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush15(QColor(0, 0, 0, 128));
        brush15.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette4.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush15);
#endif
        groupBoxVariableMap->setPalette(palette4);
        groupBoxVariableMap->setFont(font1);
        groupBoxVariableMap->setAutoFillBackground(true);
        groupBoxVariableMap->setTitle(QString::fromUtf8("Variable map"));
        groupBoxVariableMap->setAlignment(Qt::AlignmentFlag::AlignLeading|Qt::AlignmentFlag::AlignLeft|Qt::AlignmentFlag::AlignVCenter);
        opacitySliderRasterOutput = new QSlider(groupBoxVariableMap);
        opacitySliderRasterOutput->setObjectName("opacitySliderRasterOutput");
        opacitySliderRasterOutput->setEnabled(false);
        opacitySliderRasterOutput->setGeometry(QRect(20, 20, 231, 22));
        opacitySliderRasterOutput->setToolTipDuration(-1);
#if QT_CONFIG(statustip)
        opacitySliderRasterOutput->setStatusTip(QString::fromUtf8(""));
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        opacitySliderRasterOutput->setWhatsThis(QString::fromUtf8(""));
#endif // QT_CONFIG(whatsthis)
        opacitySliderRasterOutput->setMaximum(100);
        opacitySliderRasterOutput->setValue(75);
        opacitySliderRasterOutput->setOrientation(Qt::Orientation::Horizontal);
        colorScaleOutputRaster = new QWidget(groupBoxVariableMap);
        colorScaleOutputRaster->setObjectName("colorScaleOutputRaster");
        colorScaleOutputRaster->setGeometry(QRect(1, 70, 266, 42));
        colorScaleOutputRaster->setFont(font2);
        labelOutputRaster = new QLabel(groupBoxVariableMap);
        labelOutputRaster->setObjectName("labelOutputRaster");
        labelOutputRaster->setGeometry(QRect(20, 45, 248, 21));
        QPalette palette5;
        labelOutputRaster->setPalette(palette5);
        labelOutputRaster->setFont(font1);
        groupBoxMeteoPoints = new QGroupBox(centralWidget);
        groupBoxMeteoPoints->setObjectName("groupBoxMeteoPoints");
        groupBoxMeteoPoints->setEnabled(false);
        groupBoxMeteoPoints->setGeometry(QRect(0, 150, 271, 151));
        QPalette palette6;
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::WindowText, brush7);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Dark, brush1);
        QBrush brush16(QColor(100, 100, 100, 255));
        brush16.setStyle(Qt::BrushStyle::SolidPattern);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Mid, brush16);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Text, brush7);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::ButtonText, brush7);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush8);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Shadow, brush3);
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush17(QColor(0, 0, 0, 128));
        brush17.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette6.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush17);
#endif
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::WindowText, brush7);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Dark, brush1);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Mid, brush16);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Text, brush7);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::ButtonText, brush7);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush8);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Shadow, brush3);
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush18(QColor(0, 0, 0, 128));
        brush18.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette6.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush18);
#endif
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Dark, brush1);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Mid, brush16);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Base, brush8);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush8);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Shadow, brush3);
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush19(QColor(0, 0, 0, 128));
        brush19.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette6.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush19);
#endif
        groupBoxMeteoPoints->setPalette(palette6);
        groupBoxMeteoPoints->setFont(font1);
        groupBoxMeteoPoints->setAutoFillBackground(true);
        groupBoxMeteoPoints->setTitle(QString::fromUtf8("Meteo Points"));
        groupBoxMeteoPoints->setAlignment(Qt::AlignmentFlag::AlignLeading|Qt::AlignmentFlag::AlignLeft|Qt::AlignmentFlag::AlignVCenter);
        dateEdit = new QDateEdit(groupBoxMeteoPoints);
        dateEdit->setObjectName("dateEdit");
        dateEdit->setGeometry(QRect(50, 30, 101, 31));
        QPalette palette7;
        QBrush brush20(QColor(0, 0, 0, 128));
        brush20.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette7.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush20);
#endif
        QBrush brush21(QColor(0, 0, 0, 128));
        brush21.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette7.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush21);
#endif
        QBrush brush22(QColor(0, 0, 0, 128));
        brush22.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette7.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush22);
#endif
        dateEdit->setPalette(palette7);
        dateEdit->setFont(font1);
        dateEdit->setDateTime(QDateTime(QDate(2090, 1, 1), QTime(0, 0, 0)));
        dateEdit->setMaximumDateTime(QDateTime(QDate(7999, 12, 31), QTime(23, 59, 59)));
        dateEdit->setMinimumDateTime(QDateTime(QDate(1752, 9, 1), QTime(0, 0, 0)));
        dateEdit->setMaximumDate(QDate(7999, 12, 31));
        dateEdit->setCurrentSection(QDateTimeEdit::Section::YearSection);
        dateEdit->setCalendarPopup(true);
        dateEdit->setDate(QDate(2090, 1, 1));
        variableButton = new QPushButton(groupBoxMeteoPoints);
        variableButton->setObjectName("variableButton");
        variableButton->setGeometry(QRect(20, 70, 71, 23));
        variableButton->setFont(font1);
        labelVariable = new QLabel(groupBoxMeteoPoints);
        labelVariable->setObjectName("labelVariable");
        labelVariable->setGeometry(QRect(100, 70, 171, 21));
        QPalette palette8;
        labelVariable->setPalette(palette8);
        labelVariable->setFont(font1);
        colorScaleMeteoPoints = new QWidget(groupBoxMeteoPoints);
        colorScaleMeteoPoints->setObjectName("colorScaleMeteoPoints");
        colorScaleMeteoPoints->setGeometry(QRect(1, 100, 266, 42));
        colorScaleMeteoPoints->setFont(font2);
        timeEdit = new QSpinBox(groupBoxMeteoPoints);
        timeEdit->setObjectName("timeEdit");
        timeEdit->setGeometry(QRect(200, 30, 41, 31));
        timeEdit->setMinimum(0);
        timeEdit->setMaximum(23);
        dayBeforeButton = new QPushButton(groupBoxMeteoPoints);
        dayBeforeButton->setObjectName("dayBeforeButton");
        dayBeforeButton->setGeometry(QRect(20, 30, 31, 31));
        dayAfterButton = new QPushButton(groupBoxMeteoPoints);
        dayAfterButton->setObjectName("dayAfterButton");
        dayAfterButton->setGeometry(QRect(150, 30, 31, 31));
        groupBoxModel = new QGroupBox(centralWidget);
        groupBoxModel->setObjectName("groupBoxModel");
        groupBoxModel->setEnabled(false);
        groupBoxModel->setGeometry(QRect(0, 10, 271, 141));
        QPalette palette9;
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::WindowText, brush7);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Button, brush);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Midlight, brush);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Dark, brush1);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Mid, brush2);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Window, brush8);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::Shadow, brush3);
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush23(QColor(0, 0, 0, 128));
        brush23.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette9.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::PlaceholderText, brush23);
#endif
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::WindowText, brush7);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Button, brush);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Midlight, brush);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Dark, brush1);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Mid, brush2);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Window, brush8);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::Shadow, brush3);
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush24(QColor(0, 0, 0, 128));
        brush24.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette9.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::PlaceholderText, brush24);
#endif
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Button, brush);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Midlight, brush);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Dark, brush1);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Mid, brush2);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Base, brush8);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Window, brush8);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::Shadow, brush3);
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::AlternateBase, brush);
        QBrush brush25(QColor(0, 0, 0, 128));
        brush25.setStyle(Qt::BrushStyle::NoBrush);
#if QT_VERSION >= QT_VERSION_CHECK(5, 12, 0)
        palette9.setBrush(QPalette::ColorGroup::Disabled, QPalette::ColorRole::PlaceholderText, brush25);
#endif
        groupBoxModel->setPalette(palette9);
        groupBoxModel->setFont(font1);
        groupBoxModel->setAutoFillBackground(true);
        groupBoxModel->setTitle(QString::fromUtf8("Model run"));
        groupBoxModel->setAlignment(Qt::AlignmentFlag::AlignLeading|Qt::AlignmentFlag::AlignLeft|Qt::AlignmentFlag::AlignVCenter);
        buttonModelStart = new QPushButton(groupBoxModel);
        buttonModelStart->setObjectName("buttonModelStart");
        buttonModelStart->setGeometry(QRect(120, 30, 31, 28));
        buttonModelPause = new QPushButton(groupBoxModel);
        buttonModelPause->setObjectName("buttonModelPause");
        buttonModelPause->setGeometry(QRect(50, 30, 61, 28));
        buttonModelPause->setFont(font2);
        buttonModelStop = new QPushButton(groupBoxModel);
        buttonModelStop->setObjectName("buttonModelStop");
        buttonModelStop->setGeometry(QRect(160, 30, 61, 28));
        buttonModelStop->setFont(font2);
        layerNrEdit = new QSpinBox(groupBoxModel);
        layerNrEdit->setObjectName("layerNrEdit");
        layerNrEdit->setGeometry(QRect(100, 70, 42, 24));
        layerNrEdit->setReadOnly(false);
        layerNrEdit->setMinimum(1);
        layerNrEdit->setMaximum(100);
        labelLayer = new QLabel(groupBoxModel);
        labelLayer->setObjectName("labelLayer");
        labelLayer->setGeometry(QRect(40, 70, 51, 21));
        QPalette palette10;
        labelLayer->setPalette(palette10);
        labelLayer->setFont(font1);
        labelLayer->setLayoutDirection(Qt::LayoutDirection::RightToLeft);
        labelLayer->setAlignment(Qt::AlignmentFlag::AlignRight|Qt::AlignmentFlag::AlignTrailing|Qt::AlignmentFlag::AlignVCenter);
        layerDepthEdit = new QLineEdit(groupBoxModel);
        layerDepthEdit->setObjectName("layerDepthEdit");
        layerDepthEdit->setGeometry(QRect(150, 70, 71, 24));
        layerDepthEdit->setReadOnly(true);
        labelLayer_2 = new QLabel(groupBoxModel);
        labelLayer_2->setObjectName("labelLayer_2");
        labelLayer_2->setGeometry(QRect(10, 102, 50, 21));
        QPalette palette11;
        labelLayer_2->setPalette(palette11);
        labelLayer_2->setFont(font1);
        labelLayer_2->setLayoutDirection(Qt::LayoutDirection::RightToLeft);
        labelLayer_2->setAlignment(Qt::AlignmentFlag::AlignRight|Qt::AlignmentFlag::AlignTrailing|Qt::AlignmentFlag::AlignVCenter);
        modelTimeEdit = new QLineEdit(groupBoxModel);
        modelTimeEdit->setObjectName("modelTimeEdit");
        modelTimeEdit->setGeometry(QRect(70, 102, 151, 24));
        modelTimeEdit->setReadOnly(true);
        MainWindow->setCentralWidget(centralWidget);
        menuBar = new QMenuBar(MainWindow);
        menuBar->setObjectName("menuBar");
        menuBar->setGeometry(QRect(0, 0, 1280, 22));
        QPalette palette12;
        palette12.setBrush(QPalette::ColorGroup::Active, QPalette::ColorRole::ButtonText, brush7);
        palette12.setBrush(QPalette::ColorGroup::Inactive, QPalette::ColorRole::ButtonText, brush7);
        menuBar->setPalette(palette12);
        menuBar->setAutoFillBackground(false);
        menuFile = new QMenu(menuBar);
        menuFile->setObjectName("menuFile");
        menuInput = new QMenu(menuFile);
        menuInput->setObjectName("menuInput");
        menuMeteo_points = new QMenu(menuInput);
        menuMeteo_points->setObjectName("menuMeteo_points");
        menuSoil = new QMenu(menuInput);
        menuSoil->setObjectName("menuSoil");
        menuLand_use = new QMenu(menuInput);
        menuLand_use->setObjectName("menuLand_use");
        menuOpen_project = new QMenu(menuFile);
        menuOpen_project->setObjectName("menuOpen_project");
        menuOutput = new QMenu(menuFile);
        menuOutput->setObjectName("menuOutput");
        menuOutput_db = new QMenu(menuOutput);
        menuOutput_db->setObjectName("menuOutput_db");
        menuOutput_points_4 = new QMenu(menuOutput);
        menuOutput_points_4->setObjectName("menuOutput_points_4");
        menuDataSpatialization = new QMenu(menuBar);
        menuDataSpatialization->setObjectName("menuDataSpatialization");
        menuTopographic_Distance_map = new QMenu(menuDataSpatialization);
        menuTopographic_Distance_map->setObjectName("menuTopographic_Distance_map");
        menuGIS_settings = new QMenu(menuBar);
        menuGIS_settings->setObjectName("menuGIS_settings");
        menuMap = new QMenu(menuGIS_settings);
        menuMap->setObjectName("menuMap");
        menu3DModel = new QMenu(menuBar);
        menu3DModel->setObjectName("menu3DModel");
        menuShow = new QMenu(menuBar);
        menuShow->setObjectName("menuShow");
        menuPoints = new QMenu(menuShow);
        menuPoints->setObjectName("menuPoints");
        menuDEM = new QMenu(menuShow);
        menuDEM->setObjectName("menuDEM");
        menuMeteo_variables = new QMenu(menuShow);
        menuMeteo_variables->setObjectName("menuMeteo_variables");
        menuShowSoil = new QMenu(menuShow);
        menuShowSoil->setObjectName("menuShowSoil");
        menuSnow = new QMenu(menuShow);
        menuSnow->setObjectName("menuSnow");
        menuSolar_radiation_model = new QMenu(menuShow);
        menuSolar_radiation_model->setObjectName("menuSolar_radiation_model");
        menuOutput_points_3 = new QMenu(menuShow);
        menuOutput_points_3->setObjectName("menuOutput_points_3");
        menuWater_fluxes = new QMenu(menuShow);
        menuWater_fluxes->setObjectName("menuWater_fluxes");
        menuSurface_water_content = new QMenu(menuWater_fluxes);
        menuSurface_water_content->setObjectName("menuSurface_water_content");
        menuDegree_of_saturation = new QMenu(menuWater_fluxes);
        menuDegree_of_saturation->setObjectName("menuDegree_of_saturation");
        menuShowLand_use = new QMenu(menuShow);
        menuShowLand_use->setObjectName("menuShowLand_use");
        actionView_Crop = new QMenu(menuShow);
        actionView_Crop->setObjectName("actionView_Crop");
        menuSlope_stability = new QMenu(menuShow);
        menuSlope_stability->setObjectName("menuSlope_stability");
        menuRothC_model = new QMenu(menuShow);
        menuRothC_model->setObjectName("menuRothC_model");
        menuSolar_radiation_model_2 = new QMenu(menuBar);
        menuSolar_radiation_model_2->setObjectName("menuSolar_radiation_model_2");
        menuMeteo_points_2 = new QMenu(menuBar);
        menuMeteo_points_2->setObjectName("menuMeteo_points_2");
        menuDelete_points = new QMenu(menuMeteo_points_2);
        menuDelete_points->setObjectName("menuDelete_points");
        menuActivate_points = new QMenu(menuMeteo_points_2);
        menuActivate_points->setObjectName("menuActivate_points");
        menuDeactivate_points = new QMenu(menuMeteo_points_2);
        menuDeactivate_points->setObjectName("menuDeactivate_points");
        menuPoints_delete = new QMenu(menuMeteo_points_2);
        menuPoints_delete->setObjectName("menuPoints_delete");
        menuOutput_points = new QMenu(menuBar);
        menuOutput_points->setObjectName("menuOutput_points");
        menuActivate_outputPoints = new QMenu(menuOutput_points);
        menuActivate_outputPoints->setObjectName("menuActivate_outputPoints");
        menuDeactivate_outputPoints = new QMenu(menuOutput_points);
        menuDeactivate_outputPoints->setObjectName("menuDeactivate_outputPoints");
        menuDelete = new QMenu(menuOutput_points);
        menuDelete->setObjectName("menuDelete");
        MainWindow->setMenuBar(menuBar);
        statusBar = new QStatusBar(MainWindow);
        statusBar->setObjectName("statusBar");
        MainWindow->setStatusBar(statusBar);

        menuBar->addAction(menuFile->menuAction());
        menuBar->addAction(menuShow->menuAction());
        menuBar->addAction(menuMeteo_points_2->menuAction());
        menuBar->addAction(menuDataSpatialization->menuAction());
        menuBar->addAction(menuSolar_radiation_model_2->menuAction());
        menuBar->addAction(menu3DModel->menuAction());
        menuBar->addAction(menuOutput_points->menuAction());
        menuBar->addAction(menuGIS_settings->menuAction());
        menuFile->addAction(menuOpen_project->menuAction());
        menuFile->addSeparator();
        menuFile->addAction(menuInput->menuAction());
        menuFile->addSeparator();
        menuFile->addAction(menuOutput->menuAction());
        menuInput->addAction(actionLoad_DEM);
        menuInput->addAction(menuMeteo_points->menuAction());
        menuInput->addAction(menuSoil->menuAction());
        menuInput->addAction(menuLand_use->menuAction());
        menuMeteo_points->addAction(actionNew_meteoPointsDB_from_csv);
        menuMeteo_points->addAction(actionLoad_MeteoPoints);
        menuMeteo_points->addAction(actionMeteoPointsImport_data);
        menuSoil->addAction(actionLoad_soil_map);
        menuSoil->addAction(actionLoad_soil_data);
        menuLand_use->addAction(actionLoad_land_use_map);
        menuLand_use->addAction(actionLoad_crop_data);
        menuLand_use->addSeparator();
        menuLand_use->addAction(actionCreate_new_land_use_map);
        menuOpen_project->addAction(actionOpenProject);
        menuOpen_project->addAction(actionCloseProject);
        menuOutput->addAction(menuOutput_points_4->menuAction());
        menuOutput->addAction(menuOutput_db->menuAction());
        menuOutput->addAction(actionSave_outputRaster);
        menuOutput_db->addAction(actionOutputDB_new);
        menuOutput_db->addAction(actionOutputDB_open);
        menuOutput_points_4->addAction(actionOutputPoints_newFile);
        menuOutput_points_4->addAction(actionLoad_OutputPoints);
        menuDataSpatialization->addAction(actionVariableQualitySpatial);
        menuDataSpatialization->addAction(actionInterpolationSettings);
        menuDataSpatialization->addSeparator();
        menuDataSpatialization->addAction(menuTopographic_Distance_map->menuAction());
        menuDataSpatialization->addSeparator();
        menuDataSpatialization->addAction(actionComputeHour_meteoVariables);
        menuDataSpatialization->addAction(actionComputePeriod_meteoVariables);
        menuDataSpatialization->addSeparator();
        menuDataSpatialization->addAction(actionProxy_analysis);
        menuTopographic_Distance_map->addAction(actionTopographicDistanceMapWrite);
        menuTopographic_Distance_map->addAction(actionTopographicDistanceMapLoad);
        menuGIS_settings->addAction(menuMap->menuAction());
        menuGIS_settings->addAction(actionProjectSettings);
        menuGIS_settings->addSeparator();
        menuMap->addAction(actionMapOpenStreetMap);
        menuMap->addAction(actionMapGoogle_satellite);
        menuMap->addAction(actionMapGoogle_hybrid_satellite);
        menuMap->addAction(actionMapTerrain);
        menuMap->addAction(actionMapESRISatellite);
        menu3DModel->addAction(actionCriteria3D_set_processes);
        menu3DModel->addAction(actionCriteria3D_waterFluxes_settings);
        menu3DModel->addAction(actionSnow_settings);
        menu3DModel->addSeparator();
        menu3DModel->addAction(actionCriteria3D_load_state);
        menu3DModel->addAction(actionCriteria3D_load_external_state);
        menu3DModel->addAction(actionCriteria3D_save_state);
        menu3DModel->addSeparator();
        menu3DModel->addAction(actionCriteria3D_Initialize);
        menu3DModel->addAction(actionCriteria3D_compute_next_hour);
        menu3DModel->addAction(actionCriteria3D_run_models);
        menu3DModel->addSeparator();
        menu3DModel->addAction(actionCriteria3D_update_subHourly);
        menu3DModel->addSeparator();
        menu3DModel->addAction(flagSave_state_endRun);
        menu3DModel->addAction(flagSave_state_daily_step);
        menu3DModel->addAction(actionAutomatic_state_saving_end_of_year);
        menu3DModel->addAction(actionAutomatic_state_saving_end_of_month);
        menu3DModel->addSeparator();
        menu3DModel->addAction(actionCriteria3D_Water_content_summary);
        menu3DModel->addAction(actionDEM_summary);
        menuShow->addAction(actionShow_3D_viewer);
        menuShow->addSeparator();
        menuShow->addAction(menuPoints->menuAction());
        menuShow->addAction(menuOutput_points_3->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuDEM->menuAction());
        menuShow->addAction(menuShowSoil->menuAction());
        menuShow->addAction(menuShowLand_use->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuMeteo_variables->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuSolar_radiation_model->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuSnow->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(actionView_Crop->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuWater_fluxes->menuAction());
        menuShow->addAction(menuSlope_stability->menuAction());
        menuShow->addSeparator();
        menuShow->addAction(menuRothC_model->menuAction());
        menuPoints->addAction(flagView_not_active_points);
        menuPoints->addAction(flagView_values);
        menuPoints->addSeparator();
        menuPoints->addAction(actionView_PointsHide);
        menuPoints->addAction(actionView_PointsLocation);
        menuPoints->addAction(actionView_PointsCurrentVariable);
        menuDEM->addAction(actionView_Slope);
        menuDEM->addAction(actionView_Aspect);
        menuDEM->addSeparator();
        menuDEM->addAction(actionView_Boundary);
        menuDEM->addSeparator();
        menuDEM->addAction(actionHide_Geomap);
        menuMeteo_variables->addAction(actionView_Air_temperature);
        menuMeteo_variables->addAction(actionView_Air_relative_humidity);
        menuMeteo_variables->addAction(actionView_Precipitation);
        menuMeteo_variables->addAction(actionView_Wind_intensity);
        menuMeteo_variables->addSeparator();
        menuMeteo_variables->addAction(actionView_ET0);
        menuMeteo_variables->addSeparator();
        menuMeteo_variables->addAction(actionView_MeteoVariable_None);
        menuShowSoil->addAction(actionView_SoilMap);
        menuShowSoil->addSeparator();
        menuShowSoil->addAction(actionHide_Soil_map);
        menuSnow->addAction(actionView_Snow_water_equivalent);
        menuSnow->addAction(actionView_Snow_fall);
        menuSnow->addAction(actionView_Snowmelt);
        menuSnow->addSeparator();
        menuSnow->addAction(actionView_Snow_internal_energy);
        menuSnow->addAction(actionView_Snow_surface_internal_energy);
        menuSnow->addAction(actionView_Snow_surface_temperature);
        menuSnow->addAction(actionView_Snow_sensible_heat);
        menuSnow->addAction(actionView_Snow_latent_heat);
        menuSnow->addSeparator();
        menuSnow->addAction(actionView_Snow_liquid_water_content);
        menuSnow->addAction(actionView_Snow_age);
        menuSolar_radiation_model->addAction(actionView_Global_irradiance);
        menuSolar_radiation_model->addAction(actionView_Beam_irradiance);
        menuSolar_radiation_model->addAction(actionView_Diffuse_irradiance);
        menuSolar_radiation_model->addAction(actionView_Reflected_irradiance);
        menuSolar_radiation_model->addAction(actionView_Transmissivity);
        menuSolar_radiation_model->addSeparator();
        menuSolar_radiation_model->addAction(actionView_Radiation_None);
        menuOutput_points_3->addAction(flagView_not_active_outputPoints);
        menuOutput_points_3->addSeparator();
        menuOutput_points_3->addAction(flagHide_outputPoints);
        menuWater_fluxes->addAction(menuSurface_water_content->menuAction());
        menuWater_fluxes->addAction(actionView_SurfacePond);
        menuWater_fluxes->addSeparator();
        menuWater_fluxes->addAction(actionView_SoilMoisture);
        menuWater_fluxes->addAction(menuDegree_of_saturation->menuAction());
        menuWater_fluxes->addSeparator();
        menuWater_fluxes->addAction(actionView_Water_potential);
        menuSurface_water_content->addAction(actionView_SurfaceWaterContent_automatic_range);
        menuSurface_water_content->addAction(actionView_SurfaceWaterContent_fixed_range);
        menuDegree_of_saturation->addAction(actionView_DegreeOfSaturation_automatic_range);
        menuDegree_of_saturation->addAction(actionView_DegreeOfSaturation_fixed_range);
        menuShowLand_use->addAction(actionView_LandUseMap);
        menuShowLand_use->addAction(actionHide_LandUseMap);
        menuShowLand_use->addSeparator();
        menuShowLand_use->addAction(actionTree_cover_map);
        actionView_Crop->addAction(actionView_Crop_LAI);
        actionView_Crop->addAction(actionView_Crop_degreeDays);
        menuSlope_stability->addAction(actionView_Factor_of_safety);
        menuSlope_stability->addAction(actionView_Factor_of_safety_minimum);
        menuSlope_stability->addAction(flag_increase_slope);
        menuRothC_model->addAction(actionDecomposable_plant_matter);
        menuRothC_model->addAction(actionResistant_plant_matter);
        menuRothC_model->addAction(actionMicrobial_biomass);
        menuRothC_model->addAction(actionHumified_organic_matter);
        menuRothC_model->addAction(actionSoil_organic_matter);
        menuSolar_radiation_model_2->addAction(actionRadiation_settings);
        menuSolar_radiation_model_2->addSeparator();
        menuSolar_radiation_model_2->addAction(actionRadiation_compute_current_hour);
        menuSolar_radiation_model_2->addAction(actionRadiation_run_model);
        menuSolar_radiation_model_2->addSeparator();
        menuMeteo_points_2->addAction(actionPoints_clear_selection);
        menuMeteo_points_2->addAction(menuActivate_points->menuAction());
        menuMeteo_points_2->addAction(menuDeactivate_points->menuAction());
        menuMeteo_points_2->addAction(menuDelete_points->menuAction());
        menuMeteo_points_2->addAction(menuPoints_delete->menuAction());
        menuMeteo_points_2->addSeparator();
        menuDelete_points->addAction(actionDelete_Points_Selected);
        menuDelete_points->addAction(actionDelete_Points_NotActive);
        menuActivate_points->addAction(actionPoints_activate_all);
        menuActivate_points->addAction(actionPoints_activate_selected);
        menuActivate_points->addAction(actionPoints_activate_from_point_list);
        menuActivate_points->addAction(actionPoints_activate_with_criteria);
        menuDeactivate_points->addAction(actionPoints_deactivate_all);
        menuDeactivate_points->addAction(actionPoints_deactivate_selected);
        menuDeactivate_points->addAction(actionPoints_deactivate_from_point_list);
        menuDeactivate_points->addAction(actionPoints_deactivate_with_criteria);
        menuDeactivate_points->addAction(actionPoints_deactivate_with_no_data);
        menuPoints_delete->addAction(actionPoints_delete_data_selected);
        menuPoints_delete->addAction(actionPoints_delete_data_not_active);
        menuOutput_points->addAction(actionOutputPoints_add);
        menuOutput_points->addSeparator();
        menuOutput_points->addAction(actionOutputPoints_clear_selection);
        menuOutput_points->addAction(menuActivate_outputPoints->menuAction());
        menuOutput_points->addAction(menuDeactivate_outputPoints->menuAction());
        menuOutput_points->addAction(menuDelete->menuAction());
        menuOutput_points->addSeparator();
        menuOutput_points->addAction(flagOutputPoints_save_output);
        menuOutput_points->addAction(flagCompute_only_points);
        menuActivate_outputPoints->addAction(actionOutputPoints_activate_all);
        menuActivate_outputPoints->addAction(actionOutputPoints_activate_selected);
        menuDeactivate_outputPoints->addAction(actionOutputPoints_deactivate_all);
        menuDeactivate_outputPoints->addAction(actionOutputPoints_deactivate_selected);
        menuDelete->addAction(actionOutputPoints_delete_selected);

        retranslateUi(MainWindow);

        QMetaObject::connectSlotsByName(MainWindow);
    } // setupUi

    void retranslateUi(QMainWindow *MainWindow)
    {
        MainWindow->setWindowTitle(QCoreApplication::translate("MainWindow", "CRITERIA-3D", nullptr));
        actionLoad_DEM->setText(QCoreApplication::translate("MainWindow", "Digital Elevation Model...", nullptr));
        actionMapOpenStreetMap->setText(QCoreApplication::translate("MainWindow", "&OpenStreetMap", nullptr));
        actionMapESRISatellite->setText(QCoreApplication::translate("MainWindow", "ESRI world Imagery", nullptr));
        actionMapTerrain->setText(QCoreApplication::translate("MainWindow", "Google Terrain", nullptr));
        actionVariableQualitySpatial->setText(QCoreApplication::translate("MainWindow", "Spatial quality control", nullptr));
        actionCriteria3D_waterFluxes_settings->setText(QCoreApplication::translate("MainWindow", "Water fluxes settings...", nullptr));
        actionCriteria3D_Initialize->setText(QCoreApplication::translate("MainWindow", "Initialize", nullptr));
        actionView_Boundary->setText(QCoreApplication::translate("MainWindow", "Runoff boundaries", nullptr));
        actionInterpolationSettings->setText(QCoreApplication::translate("MainWindow", "Interpolation settings...", nullptr));
        actionInterpolationSettings->setIconText(QCoreApplication::translate("MainWindow", "Interpolation settings", nullptr));
#if QT_CONFIG(tooltip)
        actionInterpolationSettings->setToolTip(QCoreApplication::translate("MainWindow", "Interpolation settings", nullptr));
#endif // QT_CONFIG(tooltip)
        actionProjectSettings->setText(QCoreApplication::translate("MainWindow", "Project Parameters...", nullptr));
        actionView_Slope->setText(QCoreApplication::translate("MainWindow", "Slope", nullptr));
        actionView_Aspect->setText(QCoreApplication::translate("MainWindow", "Aspect", nullptr));
        actionView_PointsHide->setText(QCoreApplication::translate("MainWindow", "Hide", nullptr));
        actionView_PointsLocation->setText(QCoreApplication::translate("MainWindow", "Location", nullptr));
        actionView_PointsCurrentVariable->setText(QCoreApplication::translate("MainWindow", "Current variable", nullptr));
        actionView_Transmissivity->setText(QCoreApplication::translate("MainWindow", "Atmospheric transmissivity", nullptr));
        actionView_ET0->setText(QCoreApplication::translate("MainWindow", "Potential Evapotranspiration", nullptr));
        actionRadiation_compute_current_hour->setText(QCoreApplication::translate("MainWindow", "Compute current hour", nullptr));
        actionComputeHour_meteoVariables->setText(QCoreApplication::translate("MainWindow", "Compute current hour (all meteo variables)", nullptr));
        actionView_Global_irradiance->setText(QCoreApplication::translate("MainWindow", "Global irradiance", nullptr));
        actionView_Air_temperature->setText(QCoreApplication::translate("MainWindow", "Air temperature", nullptr));
        actionView_Precipitation->setText(QCoreApplication::translate("MainWindow", "Precipitation", nullptr));
        actionView_Air_relative_humidity->setText(QCoreApplication::translate("MainWindow", "Air relative humidity", nullptr));
        actionView_Wind_intensity->setText(QCoreApplication::translate("MainWindow", "Wind intensity", nullptr));
        actionRadiation_settings->setText(QCoreApplication::translate("MainWindow", "Solar radiation settings...", nullptr));
        actionView_SoilMap->setText(QCoreApplication::translate("MainWindow", "Soil map", nullptr));
        actionLoad_MeteoPoints->setText(QCoreApplication::translate("MainWindow", "Open...", nullptr));
        actionMeteoPointsImport_data->setText(QCoreApplication::translate("MainWindow", "Import hourly data...", nullptr));
        actionOpenProject->setText(QCoreApplication::translate("MainWindow", "Open...", nullptr));
        actionCloseProject->setText(QCoreApplication::translate("MainWindow", "Close", nullptr));
        actionHide_Geomap->setText(QCoreApplication::translate("MainWindow", "Hide map", nullptr));
        actionView_MeteoVariable_None->setText(QCoreApplication::translate("MainWindow", "None", nullptr));
        actionCriteria3D_run_models->setText(QCoreApplication::translate("MainWindow", "Run model...", nullptr));
        actionMapGoogle_hybrid_satellite->setText(QCoreApplication::translate("MainWindow", "Google hybrid satellite", nullptr));
        actionNew_meteoPointsDB_from_csv->setText(QCoreApplication::translate("MainWindow", "New (from csv)...", nullptr));
        actionSnow_settings->setText(QCoreApplication::translate("MainWindow", "Snow settings...", nullptr));
        actionView_Snow_water_equivalent->setText(QCoreApplication::translate("MainWindow", "Snow Water Equivalent", nullptr));
        actionView_Snow_surface_temperature->setText(QCoreApplication::translate("MainWindow", "Surface temperature", nullptr));
        actionView_Snow_internal_energy->setText(QCoreApplication::translate("MainWindow", "Energy content (snow pack or soil)", nullptr));
        actionView_Snow_fall->setText(QCoreApplication::translate("MainWindow", "Snow fall", nullptr));
        actionView_Snow_surface_internal_energy->setText(QCoreApplication::translate("MainWindow", "Energy content surface layer", nullptr));
        flagSave_state_daily_step->setText(QCoreApplication::translate("MainWindow", "Automatic state saving (daily step)", nullptr));
        actionMapGoogle_satellite->setText(QCoreApplication::translate("MainWindow", "Google satellite", nullptr));
        actionView_Beam_irradiance->setText(QCoreApplication::translate("MainWindow", "Beam", nullptr));
        actionView_Diffuse_irradiance->setText(QCoreApplication::translate("MainWindow", "Diffuse", nullptr));
        actionView_Reflected_irradiance->setText(QCoreApplication::translate("MainWindow", "Reflected", nullptr));
        actionView_Snow_liquid_water_content->setText(QCoreApplication::translate("MainWindow", "Liquid water content", nullptr));
        actionView_Snow_age->setText(QCoreApplication::translate("MainWindow", "Age of snow", nullptr));
        actionView_Snowmelt->setText(QCoreApplication::translate("MainWindow", "Snowmelt", nullptr));
        actionRadiation_run_model->setText(QCoreApplication::translate("MainWindow", "Compute period...", nullptr));
        actionProxy_analysis->setText(QCoreApplication::translate("MainWindow", "Proxy analysis...", nullptr));
        actionComputePeriod_meteoVariables->setText(QCoreApplication::translate("MainWindow", "Compute period...", nullptr));
        flagView_not_active_points->setText(QCoreApplication::translate("MainWindow", "Show not active", nullptr));
        actionDelete_Points_Selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionDelete_Points_NotActive->setText(QCoreApplication::translate("MainWindow", "Not active", nullptr));
        actionPoints_activate_all->setText(QCoreApplication::translate("MainWindow", "All", nullptr));
        actionPoints_deactivate_all->setText(QCoreApplication::translate("MainWindow", "All", nullptr));
        actionPoints_activate_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionPoints_deactivate_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionPoints_activate_from_point_list->setText(QCoreApplication::translate("MainWindow", "From point list...", nullptr));
        actionPoints_activate_with_criteria->setText(QCoreApplication::translate("MainWindow", "With criteria...", nullptr));
        actionPoints_deactivate_with_criteria->setText(QCoreApplication::translate("MainWindow", "With criteria...", nullptr));
        actionPoints_deactivate_with_no_data->setText(QCoreApplication::translate("MainWindow", "With no data", nullptr));
        actionPoints_delete_data_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionPoints_delete_data_not_active->setText(QCoreApplication::translate("MainWindow", "Not active", nullptr));
        actionPoints_deactivate_from_point_list->setText(QCoreApplication::translate("MainWindow", "From point list...", nullptr));
        actionPoints_clear_selection->setText(QCoreApplication::translate("MainWindow", "Clear selection", nullptr));
        actionOutputPoints_newFile->setText(QCoreApplication::translate("MainWindow", "New list (csv file)...", nullptr));
        actionLoad_OutputPoints->setText(QCoreApplication::translate("MainWindow", "Load list...", nullptr));
        actionOutputPoints_activate_all->setText(QCoreApplication::translate("MainWindow", "All", nullptr));
        actionOutputPoints_activate_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionOutputPoints_deactivate_all->setText(QCoreApplication::translate("MainWindow", "All", nullptr));
        actionOutputPoints_deactivate_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionOutputPoints_delete_selected->setText(QCoreApplication::translate("MainWindow", "Selected", nullptr));
        actionOutputPoints_add->setText(QCoreApplication::translate("MainWindow", "Add new point...", nullptr));
        actionOutputDB_new->setText(QCoreApplication::translate("MainWindow", "New...", nullptr));
        actionOutputDB_open->setText(QCoreApplication::translate("MainWindow", "Open...", nullptr));
        actionOutputPoints_clear_selection->setText(QCoreApplication::translate("MainWindow", "Clear selection", nullptr));
        flagHide_outputPoints->setText(QCoreApplication::translate("MainWindow", "Hide", nullptr));
        flagView_not_active_outputPoints->setText(QCoreApplication::translate("MainWindow", "View not active", nullptr));
        actionHide_Soil_map->setText(QCoreApplication::translate("MainWindow", "Hide map", nullptr));
        flagOutputPoints_save_output->setText(QCoreApplication::translate("MainWindow", "Save output on points", nullptr));
        flagCompute_only_points->setText(QCoreApplication::translate("MainWindow", "Compute only points", nullptr));
        flagView_values->setText(QCoreApplication::translate("MainWindow", "Show values", nullptr));
        actionView_Snow_sensible_heat->setText(QCoreApplication::translate("MainWindow", "Sensible heat", nullptr));
        actionView_Snow_latent_heat->setText(QCoreApplication::translate("MainWindow", "Latent heat", nullptr));
        actionTopographicDistanceMapWrite->setText(QCoreApplication::translate("MainWindow", "Write...", nullptr));
        actionTopographicDistanceMapLoad->setText(QCoreApplication::translate("MainWindow", "Load...", nullptr));
        actionCriteria3D_compute_next_hour->setText(QCoreApplication::translate("MainWindow", "Compute next hour", nullptr));
        actionShow_3D_viewer->setText(QCoreApplication::translate("MainWindow", "3D viewer", nullptr));
        actionView_LandUseMap->setText(QCoreApplication::translate("MainWindow", "Land use map", nullptr));
        actionHide_LandUseMap->setText(QCoreApplication::translate("MainWindow", "Hide map", nullptr));
        actionLoad_soil_map->setText(QCoreApplication::translate("MainWindow", "Soil map...", nullptr));
        actionLoad_soil_data->setText(QCoreApplication::translate("MainWindow", "Soil db...", nullptr));
        actionLoad_land_use_map->setText(QCoreApplication::translate("MainWindow", "Load land use map...", nullptr));
        actionLoad_crop_data->setText(QCoreApplication::translate("MainWindow", "Load crop and land units db...", nullptr));
        actionView_SoilMoisture->setText(QCoreApplication::translate("MainWindow", "Volumetric water content", nullptr));
        actionView_SurfaceWaterContent_automatic_range->setText(QCoreApplication::translate("MainWindow", "Automatic range", nullptr));
        actionView_SurfaceWaterContent_fixed_range->setText(QCoreApplication::translate("MainWindow", "Fixed range", nullptr));
        actionView_Crop_degreeDays->setText(QCoreApplication::translate("MainWindow", "Degree days", nullptr));
        actionView_Crop_LAI->setText(QCoreApplication::translate("MainWindow", "Leaf Area Index", nullptr));
        actionCriteria3D_update_subHourly->setText(QCoreApplication::translate("MainWindow", "Update sub hourly", nullptr));
        actionView_Factor_of_safety->setText(QCoreApplication::translate("MainWindow", "Factor of safety (current depth)", nullptr));
        actionView_DegreeOfSaturation_automatic_range->setText(QCoreApplication::translate("MainWindow", "Automatic range", nullptr));
        actionView_DegreeOfSaturation_fixed_range->setText(QCoreApplication::translate("MainWindow", "Fixed range", nullptr));
        actionCriteria3D_load_state->setText(QCoreApplication::translate("MainWindow", "Load state...", nullptr));
        actionCriteria3D_load_external_state->setText(QCoreApplication::translate("MainWindow", "Load external state...", nullptr));
        actionCriteria3D_save_state->setText(QCoreApplication::translate("MainWindow", "Save state", nullptr));
        actionView_Factor_of_safety_minimum->setText(QCoreApplication::translate("MainWindow", "Factor of safety (minimum value)", nullptr));
        flagSave_state_endRun->setText(QCoreApplication::translate("MainWindow", "Automatic state saving (end of run)", nullptr));
        flag_increase_slope->setText(QCoreApplication::translate("MainWindow", "increase slope", nullptr));
        actionView_Radiation_None->setText(QCoreApplication::translate("MainWindow", "None", nullptr));
        actionView_Water_potential->setText(QCoreApplication::translate("MainWindow", "Water potential", nullptr));
        actionCreate_new_land_use_map->setText(QCoreApplication::translate("MainWindow", "Create new land use map...", nullptr));
        actionCriteria3D_set_processes->setText(QCoreApplication::translate("MainWindow", "Set active processes...", nullptr));
        actionView_SurfacePond->setText(QCoreApplication::translate("MainWindow", "Surface Pond", nullptr));
        actionSave_outputRaster->setText(QCoreApplication::translate("MainWindow", "Save current output (raster)...", nullptr));
        actionLoad_DEM_->setText(QCoreApplication::translate("MainWindow", "Load DEM...", nullptr));
        actionExtract_sub_basin->setText(QCoreApplication::translate("MainWindow", "Extract sub-basin...", nullptr));
        actionCriteria3D_Water_content_summary->setText(QCoreApplication::translate("MainWindow", "Water Content summary...", nullptr));
        actionDEM_summary->setText(QCoreApplication::translate("MainWindow", "Digital Elevation Model summary...", nullptr));
        actionTree_cover_map->setText(QCoreApplication::translate("MainWindow", "Tree cover map", nullptr));
        actionDecomposable_plant_matter->setText(QCoreApplication::translate("MainWindow", "Decomposable plant matter", nullptr));
        actionResistant_plant_matter->setText(QCoreApplication::translate("MainWindow", "Resistant plant matter", nullptr));
        actionMicrobial_biomass->setText(QCoreApplication::translate("MainWindow", "Microbial biomass", nullptr));
        actionHumified_organic_matter->setText(QCoreApplication::translate("MainWindow", "Humified organic matter", nullptr));
        actionSoil_organic_matter->setText(QCoreApplication::translate("MainWindow", "Soil organic matter", nullptr));
        actionAutomatic_state_saving_end_of_year->setText(QCoreApplication::translate("MainWindow", "Automatic state saving (end of year)", nullptr));
        actionAutomatic_state_saving_end_of_month->setText(QCoreApplication::translate("MainWindow", "Automatic state saving (end of month)", nullptr));
#if QT_CONFIG(tooltip)
        opacitySliderRasterInput->setToolTip(QCoreApplication::translate("MainWindow", "Raster opacity", nullptr));
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(accessibility)
        opacitySliderRasterInput->setAccessibleName(QString());
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(accessibility)
        opacitySliderRasterInput->setAccessibleDescription(QString());
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(tooltip)
        colorScaleInputRaster->setToolTip(QCoreApplication::translate("MainWindow", "Raster colors", nullptr));
#endif // QT_CONFIG(tooltip)
        labelInputRaster->setText(QCoreApplication::translate("MainWindow", "input raster", nullptr));
#if QT_CONFIG(tooltip)
        opacitySliderRasterOutput->setToolTip(QCoreApplication::translate("MainWindow", "Raster opacity", nullptr));
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(accessibility)
        opacitySliderRasterOutput->setAccessibleName(QString());
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(accessibility)
        opacitySliderRasterOutput->setAccessibleDescription(QString());
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(tooltip)
        colorScaleOutputRaster->setToolTip(QCoreApplication::translate("MainWindow", "Raster colors", nullptr));
#endif // QT_CONFIG(tooltip)
        labelOutputRaster->setText(QCoreApplication::translate("MainWindow", "output raster", nullptr));
        dateEdit->setDisplayFormat(QCoreApplication::translate("MainWindow", "yyyy-MM-dd", nullptr));
        variableButton->setText(QCoreApplication::translate("MainWindow", "Variable", nullptr));
        labelVariable->setText(QCoreApplication::translate("MainWindow", "variable", nullptr));
#if QT_CONFIG(tooltip)
        colorScaleMeteoPoints->setToolTip(QCoreApplication::translate("MainWindow", "Variable colors", nullptr));
#endif // QT_CONFIG(tooltip)
        dayBeforeButton->setText(QCoreApplication::translate("MainWindow", "<", nullptr));
        dayAfterButton->setText(QCoreApplication::translate("MainWindow", ">", nullptr));
        buttonModelStart->setText(QCoreApplication::translate("MainWindow", ">", nullptr));
        buttonModelPause->setText(QCoreApplication::translate("MainWindow", "Pause", nullptr));
        buttonModelStop->setText(QCoreApplication::translate("MainWindow", "Stop", nullptr));
        labelLayer->setText(QCoreApplication::translate("MainWindow", "Layer", nullptr));
        labelLayer_2->setText(QCoreApplication::translate("MainWindow", "Time", nullptr));
        menuFile->setTitle(QCoreApplication::translate("MainWindow", "File", nullptr));
        menuInput->setTitle(QCoreApplication::translate("MainWindow", "Input", nullptr));
        menuMeteo_points->setTitle(QCoreApplication::translate("MainWindow", "Meteo points", nullptr));
        menuSoil->setTitle(QCoreApplication::translate("MainWindow", "soil", nullptr));
        menuLand_use->setTitle(QCoreApplication::translate("MainWindow", "Land use", nullptr));
        menuOpen_project->setTitle(QCoreApplication::translate("MainWindow", "Project", nullptr));
        menuOutput->setTitle(QCoreApplication::translate("MainWindow", "Output", nullptr));
        menuOutput_db->setTitle(QCoreApplication::translate("MainWindow", "Output db", nullptr));
        menuOutput_points_4->setTitle(QCoreApplication::translate("MainWindow", "Output points", nullptr));
        menuDataSpatialization->setTitle(QCoreApplication::translate("MainWindow", "Data spatialization", nullptr));
        menuTopographic_Distance_map->setTitle(QCoreApplication::translate("MainWindow", "Topographic Distance map", nullptr));
        menuGIS_settings->setTitle(QCoreApplication::translate("MainWindow", "Settin&gs", nullptr));
        menuMap->setTitle(QCoreApplication::translate("MainWindow", "&Map", nullptr));
        menu3DModel->setTitle(QCoreApplication::translate("MainWindow", "3D model", nullptr));
        menuShow->setTitle(QCoreApplication::translate("MainWindow", "Show", nullptr));
        menuPoints->setTitle(QCoreApplication::translate("MainWindow", "Meteo points", nullptr));
        menuDEM->setTitle(QCoreApplication::translate("MainWindow", "Geography", nullptr));
        menuMeteo_variables->setTitle(QCoreApplication::translate("MainWindow", "Meteo maps", nullptr));
        menuShowSoil->setTitle(QCoreApplication::translate("MainWindow", "Soil", nullptr));
        menuSnow->setTitle(QCoreApplication::translate("MainWindow", "Snow model", nullptr));
        menuSolar_radiation_model->setTitle(QCoreApplication::translate("MainWindow", "Solar radiation model", nullptr));
        menuOutput_points_3->setTitle(QCoreApplication::translate("MainWindow", "Output points", nullptr));
        menuWater_fluxes->setTitle(QCoreApplication::translate("MainWindow", "Water fluxes", nullptr));
        menuSurface_water_content->setTitle(QCoreApplication::translate("MainWindow", "Surface water content", nullptr));
        menuDegree_of_saturation->setTitle(QCoreApplication::translate("MainWindow", "Degree of saturation", nullptr));
        menuShowLand_use->setTitle(QCoreApplication::translate("MainWindow", "Land use", nullptr));
        actionView_Crop->setTitle(QCoreApplication::translate("MainWindow", "Crop model", nullptr));
        menuSlope_stability->setTitle(QCoreApplication::translate("MainWindow", "Slope stability", nullptr));
        menuRothC_model->setTitle(QCoreApplication::translate("MainWindow", "RothC model", nullptr));
        menuSolar_radiation_model_2->setTitle(QCoreApplication::translate("MainWindow", "Solar radiation", nullptr));
        menuMeteo_points_2->setTitle(QCoreApplication::translate("MainWindow", "Meteo points", nullptr));
        menuDelete_points->setTitle(QCoreApplication::translate("MainWindow", "Delete points", nullptr));
        menuActivate_points->setTitle(QCoreApplication::translate("MainWindow", "Activate", nullptr));
        menuDeactivate_points->setTitle(QCoreApplication::translate("MainWindow", "Deactivate", nullptr));
        menuPoints_delete->setTitle(QCoreApplication::translate("MainWindow", "Delete data", nullptr));
        menuOutput_points->setTitle(QCoreApplication::translate("MainWindow", "Output points", nullptr));
        menuActivate_outputPoints->setTitle(QCoreApplication::translate("MainWindow", "Activate", nullptr));
        menuDeactivate_outputPoints->setTitle(QCoreApplication::translate("MainWindow", "Deactivate", nullptr));
        menuDelete->setTitle(QCoreApplication::translate("MainWindow", "Delete", nullptr));
    } // retranslateUi

};

namespace Ui {
    class MainWindow: public Ui_MainWindow {};
} // namespace Ui

QT_END_NAMESPACE

#endif // UI_MAINWINDOW_H
